{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar calcLength = function (path) {\n  var parameters = path.parameters;\n  var maxLength = 0;\n  var minLength = 0;\n  var averageLength = 0;\n  var maxLengthByGroup = Array(parameters.numOfGroups).fill(0);\n  var minLengthByGroup = Array(parameters.numOfGroups).fill(0);\n  var averageLengthByGroup = Array(parameters.numOfGroups).fill(0);\n  path.vertexes = path.vertexes.map(function (vertex) {\n    var x = vertex.x - parameters.centerX;\n    var y = vertex.y - parameters.centerY;\n    vertex.length = Math.sqrt(x * x + y * y); // Average length\n\n    averageLength += vertex.length;\n    averageLengthByGroup[vertex.group] += vertex.length; // min & max length\n\n    if (vertex.length < minLength || minLength === 0) minLength = vertex.length;\n    if (vertex.length > maxLength || maxLength === 0) maxLength = vertex.length;\n    if (vertex.length > maxLengthByGroup[vertex.group] || maxLengthByGroup[vertex.group] === 0) maxLengthByGroup[vertex.group] = vertex.length;\n    if (vertex.length < minLengthByGroup[vertex.group] || minLengthByGroup[vertex.group] === 0) minLengthByGroup[vertex.group] = vertex.length;\n    return vertex;\n  });\n  averageLengthByGroup = averageLengthByGroup.map(function (len, i) {\n    return len / parameters.groups[i].numOfVertexes;\n  });\n  parameters.averageLength = averageLength / path.vertexes.length;\n  parameters.averageLengthByGroup = averageLengthByGroup;\n  parameters.minLength = minLength;\n  parameters.minLengthByGroup = minLengthByGroup;\n  parameters.maxLength = maxLength;\n  parameters.maxLengthByGroup = maxLengthByGroup;\n  return path;\n};\n\nexports.default = calcLength;","map":{"version":3,"sources":["/home/jannat/Drive/Projects/React native/Reacts/animator/node_modules/primitivo-svg/build/path/lib/calcLength.js"],"names":["Object","defineProperty","exports","value","calcLength","path","parameters","maxLength","minLength","averageLength","maxLengthByGroup","Array","numOfGroups","fill","minLengthByGroup","averageLengthByGroup","vertexes","map","vertex","x","centerX","y","centerY","length","Math","sqrt","group","len","i","groups","numOfVertexes","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar calcLength = function (path) {\n    var parameters = path.parameters;\n    var maxLength = 0;\n    var minLength = 0;\n    var averageLength = 0;\n    var maxLengthByGroup = Array(parameters.numOfGroups).fill(0);\n    var minLengthByGroup = Array(parameters.numOfGroups).fill(0);\n    var averageLengthByGroup = Array(parameters.numOfGroups).fill(0);\n    path.vertexes = path.vertexes.map(function (vertex) {\n        var x = vertex.x - parameters.centerX;\n        var y = vertex.y - parameters.centerY;\n        vertex.length = Math.sqrt(x * x + y * y);\n        // Average length\n        averageLength += vertex.length;\n        averageLengthByGroup[vertex.group] += vertex.length;\n        // min & max length\n        if (vertex.length < minLength || minLength === 0)\n            minLength = vertex.length;\n        if (vertex.length > maxLength || maxLength === 0)\n            maxLength = vertex.length;\n        if (vertex.length > maxLengthByGroup[vertex.group] ||\n            maxLengthByGroup[vertex.group] === 0)\n            maxLengthByGroup[vertex.group] = vertex.length;\n        if (vertex.length < minLengthByGroup[vertex.group] ||\n            minLengthByGroup[vertex.group] === 0)\n            minLengthByGroup[vertex.group] = vertex.length;\n        return vertex;\n    });\n    averageLengthByGroup = averageLengthByGroup.map(function (len, i) { return len / parameters.groups[i].numOfVertexes; });\n    parameters.averageLength = averageLength / path.vertexes.length;\n    parameters.averageLengthByGroup = averageLengthByGroup;\n    parameters.minLength = minLength;\n    parameters.minLengthByGroup = minLengthByGroup;\n    parameters.maxLength = maxLength;\n    parameters.maxLengthByGroup = maxLengthByGroup;\n    return path;\n};\nexports.default = calcLength;\n"]},"metadata":{},"sourceType":"script"}