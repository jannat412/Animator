{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.round = function (number) {\n  return Math.round(number * 1e6) / 1e6;\n};\n\nexports.radToAngle = function (rad) {\n  return rad * 180 / Math.PI;\n};\n\nexports.angleToRad = function (angle) {\n  return angle * Math.PI / 180;\n};\n\nexports.randomRange = function (min, max) {\n  return Math.random() * (max - min) + min;\n};\n\nexports.radiansDelta = function (prev, cur) {\n  // Convert negative radians to positive 2PI format\n  if (prev < 0) prev = 2 * Math.PI - Math.abs(prev);\n  if (cur < 0) cur = 2 * Math.PI - Math.abs(cur);\n  var delta;\n  if (prev < cur) // Fix if prev rad is before 0 and cur is after\n    delta = Math.abs(prev + (Math.PI * 2 - cur));else delta = Math.abs(prev - cur);\n  return delta;\n};\n\nexports.getType = function (item) {\n  if (Array.isArray(item)) return \"array\";\n  if (typeof item === \"object\") return \"object\";\n  if (typeof item === \"number\") return \"number\";\n}; // Fill all\n\n\nexports.all = function (value) {\n  return function (numOfVertexes) {\n    return Array(numOfVertexes).fill(value);\n  };\n}; // Set value for each vertex\n\n\nexports.perVertex = function () {\n  var values = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    values[_i] = arguments[_i];\n  }\n\n  return values.slice();\n}; // Create unique random values for each vertex\n\n\nexports.randomRangeForEach = function (min, max) {\n  return function (numOfVertexes) {\n    return Array(numOfVertexes).fill(0).map(function () {\n      return Math.random() * (max - min) + min;\n    });\n  };\n}; // Create same random value for all vertexes\n\n\nexports.randomRangeForAll = function (min, max) {\n  return function (numOfVertexes) {\n    return Array(numOfVertexes).fill(Math.random() * (max - min) + min);\n  };\n}; // Round per arm\n\n\nexports.perArm = function (first, second) {\n  return [first, second];\n};","map":{"version":3,"sources":["/home/jannat/Drive/Projects/React native/Reacts/animator/node_modules/primitivo-svg/build/misc/index.js"],"names":["Object","defineProperty","exports","value","round","number","Math","radToAngle","rad","PI","angleToRad","angle","randomRange","min","max","random","radiansDelta","prev","cur","abs","delta","getType","item","Array","isArray","all","numOfVertexes","fill","perVertex","values","_i","arguments","length","slice","randomRangeForEach","map","randomRangeForAll","perArm","first","second"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACAD,OAAO,CAACE,KAAR,GAAgB,UAAUC,MAAV,EAAkB;AAAE,SAAOC,IAAI,CAACF,KAAL,CAAWC,MAAM,GAAG,GAApB,IAA2B,GAAlC;AAAwC,CAA5E;;AACAH,OAAO,CAACK,UAAR,GAAqB,UAAUC,GAAV,EAAe;AAAE,SAAQA,GAAG,GAAG,GAAP,GAAcF,IAAI,CAACG,EAA1B;AAA+B,CAArE;;AACAP,OAAO,CAACQ,UAAR,GAAqB,UAAUC,KAAV,EAAiB;AAAE,SAAQA,KAAK,GAAGL,IAAI,CAACG,EAAd,GAAoB,GAA3B;AAAiC,CAAzE;;AACAP,OAAO,CAACU,WAAR,GAAsB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACtC,SAAOR,IAAI,CAACS,MAAL,MAAiBD,GAAG,GAAGD,GAAvB,IAA8BA,GAArC;AACH,CAFD;;AAGAX,OAAO,CAACc,YAAR,GAAuB,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AACxC;AACA,MAAID,IAAI,GAAG,CAAX,EACIA,IAAI,GAAG,IAAIX,IAAI,CAACG,EAAT,GAAcH,IAAI,CAACa,GAAL,CAASF,IAAT,CAArB;AACJ,MAAIC,GAAG,GAAG,CAAV,EACIA,GAAG,GAAG,IAAIZ,IAAI,CAACG,EAAT,GAAcH,IAAI,CAACa,GAAL,CAASD,GAAT,CAApB;AACJ,MAAIE,KAAJ;AACA,MAAIH,IAAI,GAAGC,GAAX,EACI;AACAE,IAAAA,KAAK,GAAGd,IAAI,CAACa,GAAL,CAASF,IAAI,IAAIX,IAAI,CAACG,EAAL,GAAU,CAAV,GAAcS,GAAlB,CAAb,CAAR,CAFJ,KAIIE,KAAK,GAAGd,IAAI,CAACa,GAAL,CAASF,IAAI,GAAGC,GAAhB,CAAR;AACJ,SAAOE,KAAP;AACH,CAbD;;AAcAlB,OAAO,CAACmB,OAAR,GAAkB,UAAUC,IAAV,EAAgB;AAC9B,MAAIC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EACI,OAAO,OAAP;AACJ,MAAI,OAAOA,IAAP,KAAgB,QAApB,EACI,OAAO,QAAP;AACJ,MAAI,OAAOA,IAAP,KAAgB,QAApB,EACI,OAAO,QAAP;AACP,CAPD,C,CAQA;;;AACApB,OAAO,CAACuB,GAAR,GAAc,UAAUtB,KAAV,EAAiB;AAAE,SAAO,UAAUuB,aAAV,EAAyB;AAC7D,WAAOH,KAAK,CAACG,aAAD,CAAL,CAAqBC,IAArB,CAA0BxB,KAA1B,CAAP;AACH,GAFgC;AAE7B,CAFJ,C,CAGA;;;AACAD,OAAO,CAAC0B,SAAR,GAAoB,YAAY;AAC5B,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,IAAAA,MAAM,CAACC,EAAD,CAAN,GAAaC,SAAS,CAACD,EAAD,CAAtB;AACH;;AACD,SAAOD,MAAM,CAACI,KAAP,EAAP;AACH,CAND,C,CAOA;;;AACA/B,OAAO,CAACgC,kBAAR,GAA6B,UAAUrB,GAAV,EAAeC,GAAf,EAAoB;AAAE,SAAO,UAAUY,aAAV,EAAyB;AAC/E,WAAOH,KAAK,CAACG,aAAD,CAAL,CACFC,IADE,CACG,CADH,EAEFQ,GAFE,CAEE,YAAY;AAAE,aAAO7B,IAAI,CAACS,MAAL,MAAiBD,GAAG,GAAGD,GAAvB,IAA8BA,GAArC;AAA2C,KAF3D,CAAP;AAGH,GAJkD;AAI/C,CAJJ,C,CAKA;;;AACAX,OAAO,CAACkC,iBAAR,GAA4B,UAAUvB,GAAV,EAAeC,GAAf,EAAoB;AAAE,SAAO,UAAUY,aAAV,EAAyB;AAAE,WAAOH,KAAK,CAACG,aAAD,CAAL,CAAqBC,IAArB,CAA0BrB,IAAI,CAACS,MAAL,MAAiBD,GAAG,GAAGD,GAAvB,IAA8BA,GAAxD,CAAP;AAAsE,GAAxG;AAA2G,CAA7J,C,CACA;;;AACAX,OAAO,CAACmC,MAAR,GAAiB,UAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AAAE,SAAO,CAC/CD,KAD+C,EAE/CC,MAF+C,CAAP;AAGxC,CAHJ","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.round = function (number) { return Math.round(number * 1e6) / 1e6; };\nexports.radToAngle = function (rad) { return (rad * 180) / Math.PI; };\nexports.angleToRad = function (angle) { return (angle * Math.PI) / 180; };\nexports.randomRange = function (min, max) {\n    return Math.random() * (max - min) + min;\n};\nexports.radiansDelta = function (prev, cur) {\n    // Convert negative radians to positive 2PI format\n    if (prev < 0)\n        prev = 2 * Math.PI - Math.abs(prev);\n    if (cur < 0)\n        cur = 2 * Math.PI - Math.abs(cur);\n    var delta;\n    if (prev < cur)\n        // Fix if prev rad is before 0 and cur is after\n        delta = Math.abs(prev + (Math.PI * 2 - cur));\n    else\n        delta = Math.abs(prev - cur);\n    return delta;\n};\nexports.getType = function (item) {\n    if (Array.isArray(item))\n        return \"array\";\n    if (typeof item === \"object\")\n        return \"object\";\n    if (typeof item === \"number\")\n        return \"number\";\n};\n// Fill all\nexports.all = function (value) { return function (numOfVertexes) {\n    return Array(numOfVertexes).fill(value);\n}; };\n// Set value for each vertex\nexports.perVertex = function () {\n    var values = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        values[_i] = arguments[_i];\n    }\n    return values.slice();\n};\n// Create unique random values for each vertex\nexports.randomRangeForEach = function (min, max) { return function (numOfVertexes) {\n    return Array(numOfVertexes)\n        .fill(0)\n        .map(function () { return Math.random() * (max - min) + min; });\n}; };\n// Create same random value for all vertexes\nexports.randomRangeForAll = function (min, max) { return function (numOfVertexes) { return Array(numOfVertexes).fill(Math.random() * (max - min) + min); }; };\n// Round per arm\nexports.perArm = function (first, second) { return [\n    first,\n    second\n]; };\n"]},"metadata":{},"sourceType":"script"}