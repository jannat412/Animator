{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ramda_1 = require(\"ramda\");\n\nvar pipeable_1 = require(\"fp-ts/lib/pipeable\");\n\nvar log = require(\"loglevel\").getLogger(\"spacing-log\");\n\nvar setDefaultKeySplines = function (params) {\n  return params.keySplines ? params : __assign({}, params, {\n    keySplines: \"0,0,1,1\"\n  });\n};\n\nvar initKeyTimesDefaultArray = function (numOfKeyTimes) {\n  return Array(numOfKeyTimes).fill(null, 0, numOfKeyTimes - 1);\n};\n\nvar setDefaultKeyTimes = function (params) {\n  return params.keyTimes ? params : __assign({}, params, {\n    keyTimes: pipeable_1.pipe(ramda_1.update(0, 0, initKeyTimesDefaultArray(params.progression.length)), ramda_1.update(-1, 1))\n  });\n};\n\nvar validate = function (keySplines) {\n  if (keySplines.length !== 4) throw \"Wrong keySplines format\";\n  return keySplines;\n};\n\nvar initKeySplinesArray = function (numOfKeySplines) {\n  return Array(numOfKeySplines).fill(null, 0, numOfKeySplines - 1);\n};\n\nvar format = function (numOfKeySplines) {\n  return function (keySplines) {\n    return pipeable_1.pipe(initKeySplinesArray(numOfKeySplines), ramda_1.update(0, keySplines[0] + \", \" + keySplines[1]), ramda_1.update(-1, keySplines[2] + \", \" + keySplines[3]));\n  };\n};\n\nvar parseKeySplines = function (keySplines, numOfKeySplines) {\n  return pipeable_1.pipe(ramda_1.split(\",\", keySplines), validate, format(numOfKeySplines));\n};\n\nvar prepareKeySplines = function (params) {\n  return ramda_1.type(params.keySplines) === \"String\" ? __assign({}, params, {\n    keySplines: parseKeySplines(params.keySplines, (params.progression.length - 1) * 2)\n  }) : params;\n};\n\nvar validateKeySplines = function (params) {\n  if (typeof params.keySplines === \"object\" && params.keySplines.length !== (params.progression.length - 1) * 2) throw \"Amount of keySplines' array items doesn't match the number of progression's items\";\n  return params;\n};\n\nvar prepareParameters = function (params) {\n  return pipeable_1.pipe(setDefaultKeySplines(params), setDefaultKeyTimes, prepareKeySplines, validateKeySplines);\n};\n\nexports.default = prepareParameters;","map":{"version":3,"sources":["/home/jannat/Drive/Projects/React native/Reacts/animator/node_modules/primitivo-svg/build/spacing/lib/prepareParameters.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","ramda_1","require","pipeable_1","log","getLogger","setDefaultKeySplines","params","keySplines","initKeyTimesDefaultArray","numOfKeyTimes","Array","fill","setDefaultKeyTimes","keyTimes","pipe","update","progression","validate","initKeySplinesArray","numOfKeySplines","format","parseKeySplines","split","prepareKeySplines","type","validateKeySplines","prepareParameters","default"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = require(\"ramda\");\nvar pipeable_1 = require(\"fp-ts/lib/pipeable\");\nvar log = require(\"loglevel\").getLogger(\"spacing-log\");\nvar setDefaultKeySplines = function (params) {\n    return params.keySplines ? params : __assign({}, params, { keySplines: \"0,0,1,1\" });\n};\nvar initKeyTimesDefaultArray = function (numOfKeyTimes) {\n    return Array(numOfKeyTimes).fill(null, 0, numOfKeyTimes - 1);\n};\nvar setDefaultKeyTimes = function (params) {\n    return params.keyTimes\n        ? params\n        : __assign({}, params, { keyTimes: pipeable_1.pipe(ramda_1.update(0, 0, initKeyTimesDefaultArray(params.progression.length)), ramda_1.update(-1, 1)) });\n};\nvar validate = function (keySplines) {\n    if (keySplines.length !== 4)\n        throw \"Wrong keySplines format\";\n    return keySplines;\n};\nvar initKeySplinesArray = function (numOfKeySplines) {\n    return Array(numOfKeySplines).fill(null, 0, numOfKeySplines - 1);\n};\nvar format = function (numOfKeySplines) { return function (keySplines) {\n    return pipeable_1.pipe(initKeySplinesArray(numOfKeySplines), ramda_1.update(0, keySplines[0] + \", \" + keySplines[1]), ramda_1.update(-1, keySplines[2] + \", \" + keySplines[3]));\n}; };\nvar parseKeySplines = function (keySplines, numOfKeySplines) { return pipeable_1.pipe(ramda_1.split(\",\", keySplines), validate, format(numOfKeySplines)); };\nvar prepareKeySplines = function (params) {\n    return ramda_1.type(params.keySplines) === \"String\"\n        ? __assign({}, params, { keySplines: parseKeySplines(params.keySplines, (params.progression.length - 1) * 2) }) : params;\n};\nvar validateKeySplines = function (params) {\n    if (typeof params.keySplines === \"object\" &&\n        params.keySplines.length !== (params.progression.length - 1) * 2)\n        throw \"Amount of keySplines' array items doesn't match the number of progression's items\";\n    return params;\n};\nvar prepareParameters = function (params) {\n    return pipeable_1.pipe(setDefaultKeySplines(params), setDefaultKeyTimes, prepareKeySplines, validateKeySplines);\n};\nexports.default = prepareParameters;\n"]},"metadata":{},"sourceType":"script"}